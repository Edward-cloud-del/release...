name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            sed -n "/## \[${{ steps.get_version.outputs.VERSION }}\]/,/## \[/p" CHANGELOG.md | sed '$d' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=Release ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: FrameSense ${{ steps.get_version.outputs.VERSION }}
          body: |
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Downloads
            - **Windows**: Download the `.msi` installer
            - **macOS**: Download the `.dmg` file  
            - **Linux**: Download the `.AppImage` or `.deb` package
            
            ## Installation
            Download and install the appropriate version for your platform.
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}

  # Build and upload release assets
  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-x64
            asset_name: framesense-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x64
            asset_name: framesense-windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: macos-x64
            asset_name: framesense-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: macos-arm64
            asset_name: framesense-macos-arm64
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libxdo-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: release-${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Tauri app
        run: pnpm build:tauri --target ${{ matrix.target }}

      # Upload different file types based on OS
      - name: Upload Linux AppImage
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/appimage/frame-sense_*.AppImage

      - name: Upload Linux DEB
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/deb/frame-sense_*.deb

      - name: Upload Windows MSI
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/msi/frame-sense_*.msi

      - name: Upload macOS DMG
        if: matrix.os == 'macos-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/frame-sense_*.dmg

      # Generate updater artifacts for Tauri updater
      - name: Upload updater artifacts
        if: matrix.os != 'ubuntu-latest'  # Skip Linux for updater
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            src-tauri/target/${{ matrix.target }}/release/bundle/*/frame-sense_*.tar.gz
            src-tauri/target/${{ matrix.target }}/release/bundle/*/frame-sense_*.tar.gz.sig



  # Update Homebrew formula (macOS)
  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: "!contains(github.ref, '-')"  # Only for stable releases
    
    steps:
      - name: Update Homebrew formula
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          token: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}
          formula: framesense
          tag: ${{ github.ref }}
          revision: ${{ github.sha }}

  # Notify release
  notify:
    name: Notify Release
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Notify Discord
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ðŸš€ **FrameSense ${{ steps.get_version.outputs.VERSION }} Released!**
            
            ðŸ“± **Desktop Apps**: Available for Windows, macOS, and Linux
            ðŸ“¦ **Download**: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.VERSION }}

      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            âœ… FrameSense ${{ steps.get_version.outputs.VERSION }} has been released!
            Download: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.VERSION }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}